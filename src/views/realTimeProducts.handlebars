<h2>Formulario de productos</h2>
{{!-- socket --}}
<script src="/socket.io/socket.io.js"></script>
{{!-- <script src="/src/public/utils/index.js" type="module"></script> --}}

<section>
    <form id="productForm">
        <div>
            <input name="title" type="text" placeholder="Nombre del producto">
            <div class="validation__message">Este campo es obligatorio</div>
        </div>
        <div>
            <input name="description" type="text" placeholder="Descripción del producto">
            <div class="validationMessage">Este campo es obligatorio</div>
        </div>
        <div>
            <input name="price" type="number" placeholder="$ Precio del producto">
            <div class="validationMessage">Este campo es obligatorio</div>
        </div>
        <div>
            <input name="stock" type="number" placeholder="Stock">
            <div class="validationMessage">Este campo es obligatorio</div>
        </div>
        <div>
            <input name="code" type="text" placeholder="Code del producto">
        </div>
        <div>
            <input name="category" type="text" placeholder="Categoría">
            <div class="validationMessage">Este campo es obligatorio</div>
        </div>
        <button>Enviar</button>
    </form>
</section>
<div>
    <input type="text" id="search" placeholder="Ordenar por" />
    <select id="sort">
    <option value="">Orden</option>
    <option value="asc">Ascendente</option>
    <option value="desc">Descendente</option>
    </select>
</div>

<div id="productList"></div>

<div id="pagination">
    <button id="prevPage">Anterior</button>
    <span id="pageNumber">1</span>
    <button id="nextPage">Siguiente</button>
</div>

<script>
    console.log('socket')
    const socket = io();

    let currentPage = 1;
    const productsPerPage = 1;
    let sortedProducts = []
    let filteredProducts = []

    socket.on('products', data => {
        console.log(data);
        const searchInput = document.querySelector('#search');
        const sortSelect = document.querySelector('#sort');

        sortedProducts = data;
        sortSelect.addEventListener('change', () => {
            const order = sortSelect.value;
            sortProducts(order);
            renderProducts();
        });

        searchInput.addEventListener('input', () => {
            const query = searchInput.value.toLowerCase();
            filteredProducts = sortedProducts.filter(product =>
                product.title.toLowerCase().includes(query)
            );
            renderProducts();
        });

        filteredProducts = sortedProducts;
        renderProducts();

    });
    function sortProducts(order) {
        filteredProducts.sort((a, b) => {
            if (order === 'asc') {
                return a.price.localeCompare(b.price);
            } else if (order === 'desc') {
                return b.price.localeCompare(a.price);
            }
            return 0;
        });
    }
    function renderProducts() {
    
        const productListDiv = document.querySelector('#productList')
        const start = (currentPage - 1) * productsPerPage;
        const end = start + productsPerPage;
        const paginatedProducts = filteredProducts.slice(start, end);
        
    
        let html = ''
        paginatedProducts.forEach(e => {
            html += `
                <div>
                    <div style="border: 2px solid grey; border-radius: 10px; padding: 20px; width:fit-content; margin: 10px">
                        <h4>Nombre: ${e.title}</h4>
                        <p>Descripción: ${e.description}</p>
                        <p>Precio: $ ${e.price}</p>
                        <p>Stock: ${e.stock}</p>
                        <button class="add-to-cart-btn" data-product-id="${e._id}">Agregar al carrito</button>
                    </div>
                </div>
            `
        })
        productListDiv.innerHTML = html

        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', () => {
                const productId = button.getAttribute('data-product-id');
                const cartId = '66e05e8bc3b3e275e5b4ab18';
                addToCart(cartId, productId);
                console.log('add to cart')
            });
        });

        document.querySelector('#pageNumber').textContent = currentPage;
    }
    function addToCart(cartId, productId) {
        fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al agregar el producto al carrito');
            }
            return response.json();
        })
        .then(data => {
            console.log('Producto agregado al carrito:', data);
            alert('Producto agregado exitosamente al carrito');
        })
        .catch(error => {
            console.error('Error:', error.message);
            alert('Error al agregar producto al carrito');
        });
    }

    let form = document.querySelector('#productForm');
    form.addEventListener('submit', evt => {
        evt.preventDefault();
        const title = form.elements.title.value;
        const description = form.elements.description.value;
        const price = form.elements.price.value;
        const stock = form.elements.stock.value;
        const category = form.elements.category.value;
        const code = form.elements.code.value;

        socket.emit('addProduct', {
            title,
            description,
            price,
            stock,
            category,
            code
        })
        form.reset()
    })
        
    document.querySelector('#prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            renderProducts();
        }
    });

    document.querySelector('#nextPage').addEventListener('click', () => {
        const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            renderProducts();
        }
    });
    
</script>